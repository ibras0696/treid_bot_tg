# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥

from aiogram import Router, F, Bot
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
from treid_bot_tg.DataBase.users_db import (check_user_db,
                                            status_check_user_db)
from treid_bot_tg.Utils.logger import logg_info_admin
from treid_bot_tg.Utils.message_text.user_text import welcome_message
from treid_bot_tg.config import ADMIN

# –ö–Ω–æ–ø–∫–∏
from treid_bot_tg.Keyboards.admin_keyboard import correct_user_keyboard
from treid_bot_tg.Keyboards.users_keyboards import (correct_status, values_keyboards,
                                       time_out_keyboards, back_user_button, reverse_dct_value_inverting)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞
from treid_bot_tg.Parsing.pars_treid import parse_trade_json

router = Router()

@router.message(CommandStart())
async def start_cmd(message: Message):
    # –ê–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.chat.id
    # –ø—Ä–æ–≤–µ—Ä–∫–∞
    await check_user_db(user_id)
    status = await status_check_user_db(user_id)
    if status:
        await message.answer(f'‚è≠Ô∏é –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é {message.chat.username} ‚èÆÔ∏é'
                             f'\nüìä –í –ë–æ—Ç–∞ –¥–ª—è –¢—Ä–µ–π–¥–∏–Ω–≥–∞ –∏ –¢–µ—Ö. –ê–Ω–∞–ª–∏–∑–∞ –†—ã–Ω–∫–∞ üìä'
                             f'\n‚ûï –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–æ–ª—é—Ç—É –¥–ª—è –ê–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö‚ûñ',
                             reply_markup=values_keyboards)
    else:
        await message.answer(text=welcome_message,
                             reply_markup=await correct_status(user_id)
                             )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data.startswith('cor_'))
async def corr_user_cmd(call_back: CallbackQuery, bot: Bot):
    await call_back.message.delete()
    await call_back.message.answer('–ñ–¥–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')
    user_id = call_back.message.chat.id
    username = call_back.message.chat.username
    await bot.send_message(int(ADMIN),
                           text='–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'
                                f'\nID: {user_id}'
                                f'\n–ò–º—è: {username}',
                           reply_markup=await correct_user_keyboard(user_id))


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –û–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ª—é—Ç
DATA_VALUE = {}


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –í–æ–ª—é—Ç
@router.callback_query(F.data.startswith('val_'))
async def value_user_cmd(call_back: CallbackQuery, bot: Bot):
    user_id = call_back.message.chat.id
    value_data = call_back.data.replace('val_', '')
    DATA_VALUE[user_id] = value_data
    try:
        await call_back.message.edit_text('‚è± –í—ã–±–µ—Ä–∏ –í—Ä–µ–º–µ–Ω–Ω–æ–π –ò–Ω—Ç–µ—Ä–≤–∞–ª ‚è±', reply_markup=time_out_keyboards)
    except Exception as ex:
        await logg_info_admin(log=str(ex), message=call_back.message, bot=bot)
        await call_back.message.answer('–ù–µ –Ω—É–∂–Ω–æ –Ω–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ !'
                                       '\n–ü–æ–¥–æ–∂–¥–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π —á—É—Ç—å –ø–æ–∑–∂–µ')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
@router.callback_query(F.data.startswith('time_'))
async def time_out_cmd(call_back: CallbackQuery, bot: Bot):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω—É–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    user_id = call_back.message.chat.id
    # –í—Ä–µ–º—è –≤–æ–ª—é—Ç—ã
    time_data = call_back.data.replace('time_', '')
    # –ò–Ω–¥–µ–∫—Å –í–æ–ª—é—Ç—ã
    val = DATA_VALUE.get(user_id)
    # –ù–∞–∑–≤–∞–Ω–∏–µ –í–æ–ª—é—Ç—ã
    value_name = reverse_dct_value_inverting.get(val)

    # –£–¥–∞–ª–µ–Ω–∏–µ –Ω—É–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await call_back.message.delete()
    time_message = await call_back.message.answer('‚åõÔ∏è')
    try:
        # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
        data = await parse_trade_json(
            value=val,
            timeframe=time_data
        )

        # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        # –¢–µ—Ö. –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –†–µ–∑—é–º–µ
        indicators_rezume = data['data']['indicators']['rezume']
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ü–æ–∫—É–ø–∫–∞
        indicators_buy = data['data']['indicators']['buy']
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ü—Ä–æ–¥–∞–∂–∞
        indicators_sell = data['data']['indicators']['sell']

        # –°—Ä–µ–¥–Ω–µ–µ –†–µ–∑—é–º–µ
        averages_rezume = data['data']['averages']['rezume']
        # –°—Ä–µ–¥–Ω–µ–µ –ü–æ–∫—É–ø–∫–∞
        averages_buy = data['data']['averages']['buy']
        # –°—Ä–µ–¥–Ω–µ–µ –ü—Ä–æ–¥–∞–∂–∞
        averages_sell = data['data']['averages']['sell']

        # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        lastUpdateTime = data['data']['lastUpdateTime']
        # –í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        timeframe = data['data']['timeframe']
        new_txt = (f"\t\tüíé –ê–Ω–∞–ª–∏–∑ –î–∞–Ω–Ω—ã—Ö –í–æ–ª—é—Ç—ã üíé"
                   f"\n\t{value_name}"
                   f"\nüíª –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä üíª"
                   f"\n\t\t‚ûï –ü–æ–∫—É–ø–∞—é—Ç: {indicators_buy} ‚ûï"
                   f"\n\t\t‚ûñ –ü—Ä–æ–¥–∞—é—Ç: {indicators_sell} ‚ûñ"
                   f"\n\n‚öñ –°—Ä–µ–¥–Ω—è—è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚öñ"
                   f"\n\t\t‚ûï –ü–æ–∫—É–ø–∞—é—Ç: {averages_buy} ‚ûï"
                   f"\n\t\t‚ûñ –ü—Ä–æ–¥–∞—é—Ç: {averages_sell} ‚ûñ"
                   f"\nüíπ –û–±—â–∏–π –†–µ–∑—É–ª—å—Ç–∞—Ç üíπ"
                   f"\n\t\t‚ûï –ü–æ–∫—É–ø–∫–∏: {averages_buy+indicators_buy} ‚ûï"
                   f"\n\t\t‚ûñ –ü—Ä–æ–¥–∞–∂–∏: {averages_sell+indicators_sell} ‚ûñ"
                   f"\n‚è≥ –í—ã–±—Ä–∞–Ω–Ω–æ–µ –í—Ä–µ–º—è: {timeframe} ‚è≥"
                   f"\nüï∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –í—Ä–µ–º—è –û–±–Ω–æ–≤–ª–µ–Ω–∏—è: {lastUpdateTime} üï∞")

        await time_message.delete()

        await call_back.message.answer(text=new_txt, reply_markup=back_user_button)
    except Exception as ex:
        await logg_info_admin(log=str(ex), message=call_back.message, bot=bot)
        await call_back.message.answer('–ù–µ –Ω—É–∂–Ω–æ –Ω–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ !'
                                       '\n–ü–æ–¥–æ–∂–¥–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π —á—É—Ç—å –ø–æ–∑–∂–µ')


@router.callback_query(F.data=='back')
async def back_user_cmd(call_back: CallbackQuery, bot: Bot):
    try:
        await call_back.message.edit_text(f'‚è≠Ô∏é –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é {call_back.message.chat.username} ‚èÆÔ∏é'
                             f'\nüìä –í –ë–æ—Ç–∞ –¥–ª—è –¢—Ä–µ–π–¥–∏–Ω–≥–∞ –∏ –¢–µ—Ö. –ê–Ω–∞–ª–∏–∑–∞ –†—ã–Ω–∫–∞ üìä'
                             f'\n‚ûï –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–æ–ª—é—Ç—É –¥–ª—è –ê–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö‚ûñ', reply_markup=values_keyboards )
    except Exception as ex:
        await logg_info_admin(log=str(ex), message=call_back.message, bot=bot)
        await call_back.message.answer('–ù–µ –Ω—É–∂–Ω–æ –Ω–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ !'
                                   '\n–ü–æ–¥–æ–∂–¥–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π —á—É—Ç—å –ø–æ–∑–∂–µ')










